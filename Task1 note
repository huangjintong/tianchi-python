python训练营，原本感觉我对于python已经挺熟悉的了，结果看了看发现自己忘了一些不太常用的知识点，做笔记记录一下作为补充，已经熟悉的知识就不写在里面了

python

位运算符

操作符	名称	示例
~	按位取反	~4
&	按位与	4 & 5
`	`	按位或
^	按位异或	4 ^ 5
<<	左移	4 << 2
>>	右移	4 >> 2
结合菜鸟教程
Python位运算符
按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：

下表中变量 a 为 60，b 为 13，二进制格式如下：

a = 0011 1100

b = 0000 1101

-----------------

a&b = 0000 1100

a|b = 0011 1101

a^b = 0011 0001

~a  = 1100 0011
运算符	描述	实例
&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	(a & b) 输出结果 12 ，二进制解释： 0000 1100
|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
^	按位异或运算符：当两对应的二进位相异时，结果为1	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1	(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。
<<	左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数

a = "hello"
b = "hello"
print(a is b, a == b)  # True True
print(a is not b, a != b)  # False False
True True
False False
【例子】比较的两个变量均指向可变类型。

a = ["hello"]
b = ["hello"]
print(a is b, a == b)  # False True
print(a is not b, a != b)  # True False
False True
True False
注意：

is, is not 对比的是两个变量的内存地址
==, != 对比的是两个变量的值
比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。
对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。

保留小数
b = Decimal(1) / Decimal(3)
print(b)
​
# 0.3333333333333333333333333333
0.3333333333333333333333333333

【例子】使 1/3 保留 4 位，用 getcontext().prec 来调整精度。
[24]:
decimal.getcontext().prec = 4
c = Decimal(1) / Decimal(3)
print(c)
​
# 0.3333
0.3333

bool
bool 作用在基本类型变量：X 只要不是整型 0、浮点型 0.0，bool(X) 就是 True，其余就是 False。
确定bool(X) 的值是 True 还是 False，就看 X 是不是空，空的话就是 False，不空的话就是 True。
对于数值变量，0, 0.0 都可认为是空的。
对于容器变量，里面没元素就是空的。

assert 关键词
assert这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出AssertionError的异常。
【例子】
[ ]:
my_list = ['lsgogroup']
my_list.pop(0)
assert len(my_list) > 0
​
# AssertionError
【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。
[ ]:
assert 3 > 7
​
# AssertionError

老是容易搞错，没事多看几遍
break 语句
break语句可以跳出当前所在层的循环。
【例子】
[59]:
import random
secret = random.randint(1, 10) #[1,10]之间的随机数
​
while True:
    temp = input("猜一猜小姐姐想的是哪个数字？")
    guess = int(temp)
    if guess > secret:
        print("大了，大了")
    else:
        if guess == secret:
            print("你太了解小姐姐的心思了！")
            print("哼，猜对也没有奖励！")
            break
        else:
            print("小了，小了")
print("游戏结束，不玩儿啦！")
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！

--------------------------------------------------------------------------------
continue 语句
continue终止本轮循环并开始下一轮循环。
【例子】
[60]:
for i in range(10):
    if i % 2 != 0:
        print(i)
        continue
    i += 2
    print(i)
​
第一次看见字典推导式，挺有意思
字典推导式
{ key_expr: value_expr for value in collection [if condition] }
【例子】
[70]:
b = {i: i % 2 == 0 for i in range(10) if i % 3 == 0}
print(b)
# {0: True, 3: False, 6: True, 9: False}
{0: True, 3: False, 6: True, 9: False}

next
next() 返回迭代器的下一个项目。
next() 函数要和生成迭代器的 iter() 函数一起使用。
语法
next 语法：
next(iterable[, default])
next() 返回迭代器的下一个项目
default，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。
e = (i for i in range(10))
print(e)
# <generator object <genexpr> at 0x0000007A0B8D01B0>
​
print(next(e))  # 0
print(next(e))  # 1
​
for each in e:
    print(each, end=' ')
​
# 2 3 4 5 6 7 8 9
<generator object <genexpr> at 0x0000014CEC389C78>
0
1
2 3 4 5 6 7 8 9
会对原列表造成修改！！！

异常错误

ict1 = {'a': 1, 'b': 2, 'v': 22}
try:
    x = dict1['y']
except LookupError:
    print('查询错误')
except KeyError:
    print('键错误')
else:
    print(x)
​
# 查询错误
查询错误

try-except-else语句尝试查询不在dict中的键值对，从而引发了异常。这一异常准确地说应属于KeyError，但由于KeyError是LookupError的子类，且将LookupError置于KeyError之前，因此程序优先执行该except代码块。所以，使用多个except代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。
以前没注意过的事情！！！
【例子】
[6]:
dict1 = {'a': 1, 'b': 2, 'v': 22}
try:
    x = dict1['y']
except KeyError:
    print('键错误')
except LookupError:
    print('查询错误')
else:
    print(x)
​
# 键错误
键错误

【例子】一个 except 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。
[7]:
try:
    s = 1 + '1'
    int("abc")
    f = open('test.txt')
    print(f.read())
    f.close()
except (OSError, TypeError, ValueError) as error:
    print('出错了！\n原因是：' + str(error))
​
# 出错了！
# 原因是：unsupported operand type(s) for +: 'int' and 'str'
出错了！
原因是：unsupported operand type(s) for +: 'int' and 'str'

try - except - finally 语句
try: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码
不管try子句里面有没有发生异常，finally子句都会执行。
【例子】如果一个异常在try子句里被抛出，而又没有任何的except把它截住，那么这个异常会在finally子句执行后被抛出。

